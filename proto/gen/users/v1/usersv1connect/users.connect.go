// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: users/v1/users.proto

package usersv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "ssuspy-proto/gen/users/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UsersServiceName is the fully-qualified name of the UsersService service.
	UsersServiceName = "users.v1.UsersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UsersServiceUpdateUserLanguageProcedure is the fully-qualified name of the UsersService's
	// UpdateUserLanguage RPC.
	UsersServiceUpdateUserLanguageProcedure = "/users.v1.UsersService/UpdateUserLanguage"
	// UsersServiceUpdateBotUserConnectionProcedure is the fully-qualified name of the UsersService's
	// UpdateBotUserConnection RPC.
	UsersServiceUpdateBotUserConnectionProcedure = "/users.v1.UsersService/UpdateBotUserConnection"
	// UsersServiceUpdateBotUserSendMessagesProcedure is the fully-qualified name of the UsersService's
	// UpdateBotUserSendMessages RPC.
	UsersServiceUpdateBotUserSendMessagesProcedure = "/users.v1.UsersService/UpdateBotUserSendMessages"
	// UsersServiceGetIUserProcedure is the fully-qualified name of the UsersService's GetIUser RPC.
	UsersServiceGetIUserProcedure = "/users.v1.UsersService/GetIUser"
	// UsersServiceCreateIUserProcedure is the fully-qualified name of the UsersService's CreateIUser
	// RPC.
	UsersServiceCreateIUserProcedure = "/users.v1.UsersService/CreateIUser"
	// UsersServiceCreateUserProcedure is the fully-qualified name of the UsersService's CreateUser RPC.
	UsersServiceCreateUserProcedure = "/users.v1.UsersService/CreateUser"
	// UsersServiceGetUserProcedure is the fully-qualified name of the UsersService's GetUser RPC.
	UsersServiceGetUserProcedure = "/users.v1.UsersService/GetUser"
)

// UsersServiceClient is a client for the users.v1.UsersService service.
type UsersServiceClient interface {
	UpdateUserLanguage(context.Context, *connect.Request[v1.UpdateUserLanguageRequest]) (*connect.Response[v1.UpdateUserLanguageResponse], error)
	UpdateBotUserConnection(context.Context, *connect.Request[v1.UpdateBotUserConnectionRequest]) (*connect.Response[v1.UpdateBotUserConnectionResponse], error)
	UpdateBotUserSendMessages(context.Context, *connect.Request[v1.UpdateBotUserSendMessagesRequest]) (*connect.Response[v1.UpdateBotUserSendMessagesResponse], error)
	GetIUser(context.Context, *connect.Request[v1.GetIUserRequest]) (*connect.Response[v1.GetIUserResponse], error)
	CreateIUser(context.Context, *connect.Request[v1.CreateIUserRequest]) (*connect.Response[v1.CreateIUserResponse], error)
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
}

// NewUsersServiceClient constructs a client for the users.v1.UsersService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUsersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UsersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	usersServiceMethods := v1.File_users_v1_users_proto.Services().ByName("UsersService").Methods()
	return &usersServiceClient{
		updateUserLanguage: connect.NewClient[v1.UpdateUserLanguageRequest, v1.UpdateUserLanguageResponse](
			httpClient,
			baseURL+UsersServiceUpdateUserLanguageProcedure,
			connect.WithSchema(usersServiceMethods.ByName("UpdateUserLanguage")),
			connect.WithClientOptions(opts...),
		),
		updateBotUserConnection: connect.NewClient[v1.UpdateBotUserConnectionRequest, v1.UpdateBotUserConnectionResponse](
			httpClient,
			baseURL+UsersServiceUpdateBotUserConnectionProcedure,
			connect.WithSchema(usersServiceMethods.ByName("UpdateBotUserConnection")),
			connect.WithClientOptions(opts...),
		),
		updateBotUserSendMessages: connect.NewClient[v1.UpdateBotUserSendMessagesRequest, v1.UpdateBotUserSendMessagesResponse](
			httpClient,
			baseURL+UsersServiceUpdateBotUserSendMessagesProcedure,
			connect.WithSchema(usersServiceMethods.ByName("UpdateBotUserSendMessages")),
			connect.WithClientOptions(opts...),
		),
		getIUser: connect.NewClient[v1.GetIUserRequest, v1.GetIUserResponse](
			httpClient,
			baseURL+UsersServiceGetIUserProcedure,
			connect.WithSchema(usersServiceMethods.ByName("GetIUser")),
			connect.WithClientOptions(opts...),
		),
		createIUser: connect.NewClient[v1.CreateIUserRequest, v1.CreateIUserResponse](
			httpClient,
			baseURL+UsersServiceCreateIUserProcedure,
			connect.WithSchema(usersServiceMethods.ByName("CreateIUser")),
			connect.WithClientOptions(opts...),
		),
		createUser: connect.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+UsersServiceCreateUserProcedure,
			connect.WithSchema(usersServiceMethods.ByName("CreateUser")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+UsersServiceGetUserProcedure,
			connect.WithSchema(usersServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
	}
}

// usersServiceClient implements UsersServiceClient.
type usersServiceClient struct {
	updateUserLanguage        *connect.Client[v1.UpdateUserLanguageRequest, v1.UpdateUserLanguageResponse]
	updateBotUserConnection   *connect.Client[v1.UpdateBotUserConnectionRequest, v1.UpdateBotUserConnectionResponse]
	updateBotUserSendMessages *connect.Client[v1.UpdateBotUserSendMessagesRequest, v1.UpdateBotUserSendMessagesResponse]
	getIUser                  *connect.Client[v1.GetIUserRequest, v1.GetIUserResponse]
	createIUser               *connect.Client[v1.CreateIUserRequest, v1.CreateIUserResponse]
	createUser                *connect.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	getUser                   *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
}

// UpdateUserLanguage calls users.v1.UsersService.UpdateUserLanguage.
func (c *usersServiceClient) UpdateUserLanguage(ctx context.Context, req *connect.Request[v1.UpdateUserLanguageRequest]) (*connect.Response[v1.UpdateUserLanguageResponse], error) {
	return c.updateUserLanguage.CallUnary(ctx, req)
}

// UpdateBotUserConnection calls users.v1.UsersService.UpdateBotUserConnection.
func (c *usersServiceClient) UpdateBotUserConnection(ctx context.Context, req *connect.Request[v1.UpdateBotUserConnectionRequest]) (*connect.Response[v1.UpdateBotUserConnectionResponse], error) {
	return c.updateBotUserConnection.CallUnary(ctx, req)
}

// UpdateBotUserSendMessages calls users.v1.UsersService.UpdateBotUserSendMessages.
func (c *usersServiceClient) UpdateBotUserSendMessages(ctx context.Context, req *connect.Request[v1.UpdateBotUserSendMessagesRequest]) (*connect.Response[v1.UpdateBotUserSendMessagesResponse], error) {
	return c.updateBotUserSendMessages.CallUnary(ctx, req)
}

// GetIUser calls users.v1.UsersService.GetIUser.
func (c *usersServiceClient) GetIUser(ctx context.Context, req *connect.Request[v1.GetIUserRequest]) (*connect.Response[v1.GetIUserResponse], error) {
	return c.getIUser.CallUnary(ctx, req)
}

// CreateIUser calls users.v1.UsersService.CreateIUser.
func (c *usersServiceClient) CreateIUser(ctx context.Context, req *connect.Request[v1.CreateIUserRequest]) (*connect.Response[v1.CreateIUserResponse], error) {
	return c.createIUser.CallUnary(ctx, req)
}

// CreateUser calls users.v1.UsersService.CreateUser.
func (c *usersServiceClient) CreateUser(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// GetUser calls users.v1.UsersService.GetUser.
func (c *usersServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UsersServiceHandler is an implementation of the users.v1.UsersService service.
type UsersServiceHandler interface {
	UpdateUserLanguage(context.Context, *connect.Request[v1.UpdateUserLanguageRequest]) (*connect.Response[v1.UpdateUserLanguageResponse], error)
	UpdateBotUserConnection(context.Context, *connect.Request[v1.UpdateBotUserConnectionRequest]) (*connect.Response[v1.UpdateBotUserConnectionResponse], error)
	UpdateBotUserSendMessages(context.Context, *connect.Request[v1.UpdateBotUserSendMessagesRequest]) (*connect.Response[v1.UpdateBotUserSendMessagesResponse], error)
	GetIUser(context.Context, *connect.Request[v1.GetIUserRequest]) (*connect.Response[v1.GetIUserResponse], error)
	CreateIUser(context.Context, *connect.Request[v1.CreateIUserRequest]) (*connect.Response[v1.CreateIUserResponse], error)
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
}

// NewUsersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUsersServiceHandler(svc UsersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	usersServiceMethods := v1.File_users_v1_users_proto.Services().ByName("UsersService").Methods()
	usersServiceUpdateUserLanguageHandler := connect.NewUnaryHandler(
		UsersServiceUpdateUserLanguageProcedure,
		svc.UpdateUserLanguage,
		connect.WithSchema(usersServiceMethods.ByName("UpdateUserLanguage")),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceUpdateBotUserConnectionHandler := connect.NewUnaryHandler(
		UsersServiceUpdateBotUserConnectionProcedure,
		svc.UpdateBotUserConnection,
		connect.WithSchema(usersServiceMethods.ByName("UpdateBotUserConnection")),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceUpdateBotUserSendMessagesHandler := connect.NewUnaryHandler(
		UsersServiceUpdateBotUserSendMessagesProcedure,
		svc.UpdateBotUserSendMessages,
		connect.WithSchema(usersServiceMethods.ByName("UpdateBotUserSendMessages")),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceGetIUserHandler := connect.NewUnaryHandler(
		UsersServiceGetIUserProcedure,
		svc.GetIUser,
		connect.WithSchema(usersServiceMethods.ByName("GetIUser")),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceCreateIUserHandler := connect.NewUnaryHandler(
		UsersServiceCreateIUserProcedure,
		svc.CreateIUser,
		connect.WithSchema(usersServiceMethods.ByName("CreateIUser")),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceCreateUserHandler := connect.NewUnaryHandler(
		UsersServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(usersServiceMethods.ByName("CreateUser")),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceGetUserHandler := connect.NewUnaryHandler(
		UsersServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(usersServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	return "/users.v1.UsersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UsersServiceUpdateUserLanguageProcedure:
			usersServiceUpdateUserLanguageHandler.ServeHTTP(w, r)
		case UsersServiceUpdateBotUserConnectionProcedure:
			usersServiceUpdateBotUserConnectionHandler.ServeHTTP(w, r)
		case UsersServiceUpdateBotUserSendMessagesProcedure:
			usersServiceUpdateBotUserSendMessagesHandler.ServeHTTP(w, r)
		case UsersServiceGetIUserProcedure:
			usersServiceGetIUserHandler.ServeHTTP(w, r)
		case UsersServiceCreateIUserProcedure:
			usersServiceCreateIUserHandler.ServeHTTP(w, r)
		case UsersServiceCreateUserProcedure:
			usersServiceCreateUserHandler.ServeHTTP(w, r)
		case UsersServiceGetUserProcedure:
			usersServiceGetUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUsersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUsersServiceHandler struct{}

func (UnimplementedUsersServiceHandler) UpdateUserLanguage(context.Context, *connect.Request[v1.UpdateUserLanguageRequest]) (*connect.Response[v1.UpdateUserLanguageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.v1.UsersService.UpdateUserLanguage is not implemented"))
}

func (UnimplementedUsersServiceHandler) UpdateBotUserConnection(context.Context, *connect.Request[v1.UpdateBotUserConnectionRequest]) (*connect.Response[v1.UpdateBotUserConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.v1.UsersService.UpdateBotUserConnection is not implemented"))
}

func (UnimplementedUsersServiceHandler) UpdateBotUserSendMessages(context.Context, *connect.Request[v1.UpdateBotUserSendMessagesRequest]) (*connect.Response[v1.UpdateBotUserSendMessagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.v1.UsersService.UpdateBotUserSendMessages is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetIUser(context.Context, *connect.Request[v1.GetIUserRequest]) (*connect.Response[v1.GetIUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.v1.UsersService.GetIUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) CreateIUser(context.Context, *connect.Request[v1.CreateIUserRequest]) (*connect.Response[v1.CreateIUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.v1.UsersService.CreateIUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.v1.UsersService.CreateUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.v1.UsersService.GetUser is not implemented"))
}
