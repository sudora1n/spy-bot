// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: messages/v1/messages.proto

package messagesv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "ssuspy-proto/gen/messages/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MessagesServiceName is the fully-qualified name of the MessagesService service.
	MessagesServiceName = "messages.v1.MessagesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MessagesServiceCreateMessageProcedure is the fully-qualified name of the MessagesService's
	// CreateMessage RPC.
	MessagesServiceCreateMessageProcedure = "/messages.v1.MessagesService/CreateMessage"
	// MessagesServiceGetMessageProcedure is the fully-qualified name of the MessagesService's
	// GetMessage RPC.
	MessagesServiceGetMessageProcedure = "/messages.v1.MessagesService/GetMessage"
	// MessagesServiceGetMessagesProcedure is the fully-qualified name of the MessagesService's
	// GetMessages RPC.
	MessagesServiceGetMessagesProcedure = "/messages.v1.MessagesService/GetMessages"
)

// MessagesServiceClient is a client for the messages.v1.MessagesService service.
type MessagesServiceClient interface {
	CreateMessage(context.Context, *connect.Request[v1.CreateMessageRequest]) (*connect.Response[v1.CreateMessageResponse], error)
	GetMessage(context.Context, *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.GetMessageResponse], error)
	GetMessages(context.Context, *connect.Request[v1.GetMessagesRequest]) (*connect.Response[v1.GetMessagesResponse], error)
}

// NewMessagesServiceClient constructs a client for the messages.v1.MessagesService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessagesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MessagesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	messagesServiceMethods := v1.File_messages_v1_messages_proto.Services().ByName("MessagesService").Methods()
	return &messagesServiceClient{
		createMessage: connect.NewClient[v1.CreateMessageRequest, v1.CreateMessageResponse](
			httpClient,
			baseURL+MessagesServiceCreateMessageProcedure,
			connect.WithSchema(messagesServiceMethods.ByName("CreateMessage")),
			connect.WithClientOptions(opts...),
		),
		getMessage: connect.NewClient[v1.GetMessageRequest, v1.GetMessageResponse](
			httpClient,
			baseURL+MessagesServiceGetMessageProcedure,
			connect.WithSchema(messagesServiceMethods.ByName("GetMessage")),
			connect.WithClientOptions(opts...),
		),
		getMessages: connect.NewClient[v1.GetMessagesRequest, v1.GetMessagesResponse](
			httpClient,
			baseURL+MessagesServiceGetMessagesProcedure,
			connect.WithSchema(messagesServiceMethods.ByName("GetMessages")),
			connect.WithClientOptions(opts...),
		),
	}
}

// messagesServiceClient implements MessagesServiceClient.
type messagesServiceClient struct {
	createMessage *connect.Client[v1.CreateMessageRequest, v1.CreateMessageResponse]
	getMessage    *connect.Client[v1.GetMessageRequest, v1.GetMessageResponse]
	getMessages   *connect.Client[v1.GetMessagesRequest, v1.GetMessagesResponse]
}

// CreateMessage calls messages.v1.MessagesService.CreateMessage.
func (c *messagesServiceClient) CreateMessage(ctx context.Context, req *connect.Request[v1.CreateMessageRequest]) (*connect.Response[v1.CreateMessageResponse], error) {
	return c.createMessage.CallUnary(ctx, req)
}

// GetMessage calls messages.v1.MessagesService.GetMessage.
func (c *messagesServiceClient) GetMessage(ctx context.Context, req *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.GetMessageResponse], error) {
	return c.getMessage.CallUnary(ctx, req)
}

// GetMessages calls messages.v1.MessagesService.GetMessages.
func (c *messagesServiceClient) GetMessages(ctx context.Context, req *connect.Request[v1.GetMessagesRequest]) (*connect.Response[v1.GetMessagesResponse], error) {
	return c.getMessages.CallUnary(ctx, req)
}

// MessagesServiceHandler is an implementation of the messages.v1.MessagesService service.
type MessagesServiceHandler interface {
	CreateMessage(context.Context, *connect.Request[v1.CreateMessageRequest]) (*connect.Response[v1.CreateMessageResponse], error)
	GetMessage(context.Context, *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.GetMessageResponse], error)
	GetMessages(context.Context, *connect.Request[v1.GetMessagesRequest]) (*connect.Response[v1.GetMessagesResponse], error)
}

// NewMessagesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessagesServiceHandler(svc MessagesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	messagesServiceMethods := v1.File_messages_v1_messages_proto.Services().ByName("MessagesService").Methods()
	messagesServiceCreateMessageHandler := connect.NewUnaryHandler(
		MessagesServiceCreateMessageProcedure,
		svc.CreateMessage,
		connect.WithSchema(messagesServiceMethods.ByName("CreateMessage")),
		connect.WithHandlerOptions(opts...),
	)
	messagesServiceGetMessageHandler := connect.NewUnaryHandler(
		MessagesServiceGetMessageProcedure,
		svc.GetMessage,
		connect.WithSchema(messagesServiceMethods.ByName("GetMessage")),
		connect.WithHandlerOptions(opts...),
	)
	messagesServiceGetMessagesHandler := connect.NewUnaryHandler(
		MessagesServiceGetMessagesProcedure,
		svc.GetMessages,
		connect.WithSchema(messagesServiceMethods.ByName("GetMessages")),
		connect.WithHandlerOptions(opts...),
	)
	return "/messages.v1.MessagesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MessagesServiceCreateMessageProcedure:
			messagesServiceCreateMessageHandler.ServeHTTP(w, r)
		case MessagesServiceGetMessageProcedure:
			messagesServiceGetMessageHandler.ServeHTTP(w, r)
		case MessagesServiceGetMessagesProcedure:
			messagesServiceGetMessagesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMessagesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMessagesServiceHandler struct{}

func (UnimplementedMessagesServiceHandler) CreateMessage(context.Context, *connect.Request[v1.CreateMessageRequest]) (*connect.Response[v1.CreateMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("messages.v1.MessagesService.CreateMessage is not implemented"))
}

func (UnimplementedMessagesServiceHandler) GetMessage(context.Context, *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.GetMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("messages.v1.MessagesService.GetMessage is not implemented"))
}

func (UnimplementedMessagesServiceHandler) GetMessages(context.Context, *connect.Request[v1.GetMessagesRequest]) (*connect.Response[v1.GetMessagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("messages.v1.MessagesService.GetMessages is not implemented"))
}
