// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: bots/v1/bots.proto

package botsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BotsService_GetBots_FullMethodName           = "/bots.v1.BotsService/GetBots"
	BotsService_GetBotStat_FullMethodName        = "/bots.v1.BotsService/GetBotStat"
	BotsService_GetBotByTokenHash_FullMethodName = "/bots.v1.BotsService/GetBotByTokenHash"
	BotsService_CreateBot_FullMethodName         = "/bots.v1.BotsService/CreateBot"
	BotsService_RemoveBot_FullMethodName         = "/bots.v1.BotsService/RemoveBot"
)

// BotsServiceClient is the client API for BotsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BotsServiceClient interface {
	GetBots(ctx context.Context, in *GetBotsRequest, opts ...grpc.CallOption) (*GetBotsResponse, error)
	GetBotStat(ctx context.Context, in *GetBotStatRequest, opts ...grpc.CallOption) (*GetBotStatResponse, error)
	GetBotByTokenHash(ctx context.Context, in *GetBotByTokenHashRequest, opts ...grpc.CallOption) (*GetBotByTokenHashResponse, error)
	CreateBot(ctx context.Context, in *CreateBotRequest, opts ...grpc.CallOption) (*CreateBotResponse, error)
	RemoveBot(ctx context.Context, in *RemoveBotRequest, opts ...grpc.CallOption) (*RemoveBotResponse, error)
}

type botsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBotsServiceClient(cc grpc.ClientConnInterface) BotsServiceClient {
	return &botsServiceClient{cc}
}

func (c *botsServiceClient) GetBots(ctx context.Context, in *GetBotsRequest, opts ...grpc.CallOption) (*GetBotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBotsResponse)
	err := c.cc.Invoke(ctx, BotsService_GetBots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botsServiceClient) GetBotStat(ctx context.Context, in *GetBotStatRequest, opts ...grpc.CallOption) (*GetBotStatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBotStatResponse)
	err := c.cc.Invoke(ctx, BotsService_GetBotStat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botsServiceClient) GetBotByTokenHash(ctx context.Context, in *GetBotByTokenHashRequest, opts ...grpc.CallOption) (*GetBotByTokenHashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBotByTokenHashResponse)
	err := c.cc.Invoke(ctx, BotsService_GetBotByTokenHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botsServiceClient) CreateBot(ctx context.Context, in *CreateBotRequest, opts ...grpc.CallOption) (*CreateBotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBotResponse)
	err := c.cc.Invoke(ctx, BotsService_CreateBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botsServiceClient) RemoveBot(ctx context.Context, in *RemoveBotRequest, opts ...grpc.CallOption) (*RemoveBotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveBotResponse)
	err := c.cc.Invoke(ctx, BotsService_RemoveBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotsServiceServer is the server API for BotsService service.
// All implementations must embed UnimplementedBotsServiceServer
// for forward compatibility.
type BotsServiceServer interface {
	GetBots(context.Context, *GetBotsRequest) (*GetBotsResponse, error)
	GetBotStat(context.Context, *GetBotStatRequest) (*GetBotStatResponse, error)
	GetBotByTokenHash(context.Context, *GetBotByTokenHashRequest) (*GetBotByTokenHashResponse, error)
	CreateBot(context.Context, *CreateBotRequest) (*CreateBotResponse, error)
	RemoveBot(context.Context, *RemoveBotRequest) (*RemoveBotResponse, error)
	mustEmbedUnimplementedBotsServiceServer()
}

// UnimplementedBotsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBotsServiceServer struct{}

func (UnimplementedBotsServiceServer) GetBots(context.Context, *GetBotsRequest) (*GetBotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBots not implemented")
}
func (UnimplementedBotsServiceServer) GetBotStat(context.Context, *GetBotStatRequest) (*GetBotStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotStat not implemented")
}
func (UnimplementedBotsServiceServer) GetBotByTokenHash(context.Context, *GetBotByTokenHashRequest) (*GetBotByTokenHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotByTokenHash not implemented")
}
func (UnimplementedBotsServiceServer) CreateBot(context.Context, *CreateBotRequest) (*CreateBotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBot not implemented")
}
func (UnimplementedBotsServiceServer) RemoveBot(context.Context, *RemoveBotRequest) (*RemoveBotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBot not implemented")
}
func (UnimplementedBotsServiceServer) mustEmbedUnimplementedBotsServiceServer() {}
func (UnimplementedBotsServiceServer) testEmbeddedByValue()                     {}

// UnsafeBotsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotsServiceServer will
// result in compilation errors.
type UnsafeBotsServiceServer interface {
	mustEmbedUnimplementedBotsServiceServer()
}

func RegisterBotsServiceServer(s grpc.ServiceRegistrar, srv BotsServiceServer) {
	// If the following call pancis, it indicates UnimplementedBotsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BotsService_ServiceDesc, srv)
}

func _BotsService_GetBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotsServiceServer).GetBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotsService_GetBots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotsServiceServer).GetBots(ctx, req.(*GetBotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotsService_GetBotStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotsServiceServer).GetBotStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotsService_GetBotStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotsServiceServer).GetBotStat(ctx, req.(*GetBotStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotsService_GetBotByTokenHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotByTokenHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotsServiceServer).GetBotByTokenHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotsService_GetBotByTokenHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotsServiceServer).GetBotByTokenHash(ctx, req.(*GetBotByTokenHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotsService_CreateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotsServiceServer).CreateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotsService_CreateBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotsServiceServer).CreateBot(ctx, req.(*CreateBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotsService_RemoveBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotsServiceServer).RemoveBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotsService_RemoveBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotsServiceServer).RemoveBot(ctx, req.(*RemoveBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BotsService_ServiceDesc is the grpc.ServiceDesc for BotsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BotsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bots.v1.BotsService",
	HandlerType: (*BotsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBots",
			Handler:    _BotsService_GetBots_Handler,
		},
		{
			MethodName: "GetBotStat",
			Handler:    _BotsService_GetBotStat_Handler,
		},
		{
			MethodName: "GetBotByTokenHash",
			Handler:    _BotsService_GetBotByTokenHash_Handler,
		},
		{
			MethodName: "CreateBot",
			Handler:    _BotsService_CreateBot_Handler,
		},
		{
			MethodName: "RemoveBot",
			Handler:    _BotsService_RemoveBot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bots/v1/bots.proto",
}
