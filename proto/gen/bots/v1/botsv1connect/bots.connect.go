// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: bots/v1/bots.proto

package botsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "ssuspy-proto/gen/bots/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BotsServiceName is the fully-qualified name of the BotsService service.
	BotsServiceName = "bots.v1.BotsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BotsServiceGetBotsProcedure is the fully-qualified name of the BotsService's GetBots RPC.
	BotsServiceGetBotsProcedure = "/bots.v1.BotsService/GetBots"
	// BotsServiceGetBotStatProcedure is the fully-qualified name of the BotsService's GetBotStat RPC.
	BotsServiceGetBotStatProcedure = "/bots.v1.BotsService/GetBotStat"
	// BotsServiceGetBotByTokenHashProcedure is the fully-qualified name of the BotsService's
	// GetBotByTokenHash RPC.
	BotsServiceGetBotByTokenHashProcedure = "/bots.v1.BotsService/GetBotByTokenHash"
	// BotsServiceCreateBotProcedure is the fully-qualified name of the BotsService's CreateBot RPC.
	BotsServiceCreateBotProcedure = "/bots.v1.BotsService/CreateBot"
	// BotsServiceRemoveBotProcedure is the fully-qualified name of the BotsService's RemoveBot RPC.
	BotsServiceRemoveBotProcedure = "/bots.v1.BotsService/RemoveBot"
)

// BotsServiceClient is a client for the bots.v1.BotsService service.
type BotsServiceClient interface {
	GetBots(context.Context, *connect.Request[v1.GetBotsRequest]) (*connect.Response[v1.GetBotsResponse], error)
	GetBotStat(context.Context, *connect.Request[v1.GetBotStatRequest]) (*connect.Response[v1.GetBotStatResponse], error)
	GetBotByTokenHash(context.Context, *connect.Request[v1.GetBotByTokenHashRequest]) (*connect.Response[v1.GetBotByTokenHashResponse], error)
	CreateBot(context.Context, *connect.Request[v1.CreateBotRequest]) (*connect.Response[v1.CreateBotResponse], error)
	RemoveBot(context.Context, *connect.Request[v1.RemoveBotRequest]) (*connect.Response[v1.RemoveBotResponse], error)
}

// NewBotsServiceClient constructs a client for the bots.v1.BotsService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBotsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BotsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	botsServiceMethods := v1.File_bots_v1_bots_proto.Services().ByName("BotsService").Methods()
	return &botsServiceClient{
		getBots: connect.NewClient[v1.GetBotsRequest, v1.GetBotsResponse](
			httpClient,
			baseURL+BotsServiceGetBotsProcedure,
			connect.WithSchema(botsServiceMethods.ByName("GetBots")),
			connect.WithClientOptions(opts...),
		),
		getBotStat: connect.NewClient[v1.GetBotStatRequest, v1.GetBotStatResponse](
			httpClient,
			baseURL+BotsServiceGetBotStatProcedure,
			connect.WithSchema(botsServiceMethods.ByName("GetBotStat")),
			connect.WithClientOptions(opts...),
		),
		getBotByTokenHash: connect.NewClient[v1.GetBotByTokenHashRequest, v1.GetBotByTokenHashResponse](
			httpClient,
			baseURL+BotsServiceGetBotByTokenHashProcedure,
			connect.WithSchema(botsServiceMethods.ByName("GetBotByTokenHash")),
			connect.WithClientOptions(opts...),
		),
		createBot: connect.NewClient[v1.CreateBotRequest, v1.CreateBotResponse](
			httpClient,
			baseURL+BotsServiceCreateBotProcedure,
			connect.WithSchema(botsServiceMethods.ByName("CreateBot")),
			connect.WithClientOptions(opts...),
		),
		removeBot: connect.NewClient[v1.RemoveBotRequest, v1.RemoveBotResponse](
			httpClient,
			baseURL+BotsServiceRemoveBotProcedure,
			connect.WithSchema(botsServiceMethods.ByName("RemoveBot")),
			connect.WithClientOptions(opts...),
		),
	}
}

// botsServiceClient implements BotsServiceClient.
type botsServiceClient struct {
	getBots           *connect.Client[v1.GetBotsRequest, v1.GetBotsResponse]
	getBotStat        *connect.Client[v1.GetBotStatRequest, v1.GetBotStatResponse]
	getBotByTokenHash *connect.Client[v1.GetBotByTokenHashRequest, v1.GetBotByTokenHashResponse]
	createBot         *connect.Client[v1.CreateBotRequest, v1.CreateBotResponse]
	removeBot         *connect.Client[v1.RemoveBotRequest, v1.RemoveBotResponse]
}

// GetBots calls bots.v1.BotsService.GetBots.
func (c *botsServiceClient) GetBots(ctx context.Context, req *connect.Request[v1.GetBotsRequest]) (*connect.Response[v1.GetBotsResponse], error) {
	return c.getBots.CallUnary(ctx, req)
}

// GetBotStat calls bots.v1.BotsService.GetBotStat.
func (c *botsServiceClient) GetBotStat(ctx context.Context, req *connect.Request[v1.GetBotStatRequest]) (*connect.Response[v1.GetBotStatResponse], error) {
	return c.getBotStat.CallUnary(ctx, req)
}

// GetBotByTokenHash calls bots.v1.BotsService.GetBotByTokenHash.
func (c *botsServiceClient) GetBotByTokenHash(ctx context.Context, req *connect.Request[v1.GetBotByTokenHashRequest]) (*connect.Response[v1.GetBotByTokenHashResponse], error) {
	return c.getBotByTokenHash.CallUnary(ctx, req)
}

// CreateBot calls bots.v1.BotsService.CreateBot.
func (c *botsServiceClient) CreateBot(ctx context.Context, req *connect.Request[v1.CreateBotRequest]) (*connect.Response[v1.CreateBotResponse], error) {
	return c.createBot.CallUnary(ctx, req)
}

// RemoveBot calls bots.v1.BotsService.RemoveBot.
func (c *botsServiceClient) RemoveBot(ctx context.Context, req *connect.Request[v1.RemoveBotRequest]) (*connect.Response[v1.RemoveBotResponse], error) {
	return c.removeBot.CallUnary(ctx, req)
}

// BotsServiceHandler is an implementation of the bots.v1.BotsService service.
type BotsServiceHandler interface {
	GetBots(context.Context, *connect.Request[v1.GetBotsRequest]) (*connect.Response[v1.GetBotsResponse], error)
	GetBotStat(context.Context, *connect.Request[v1.GetBotStatRequest]) (*connect.Response[v1.GetBotStatResponse], error)
	GetBotByTokenHash(context.Context, *connect.Request[v1.GetBotByTokenHashRequest]) (*connect.Response[v1.GetBotByTokenHashResponse], error)
	CreateBot(context.Context, *connect.Request[v1.CreateBotRequest]) (*connect.Response[v1.CreateBotResponse], error)
	RemoveBot(context.Context, *connect.Request[v1.RemoveBotRequest]) (*connect.Response[v1.RemoveBotResponse], error)
}

// NewBotsServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBotsServiceHandler(svc BotsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	botsServiceMethods := v1.File_bots_v1_bots_proto.Services().ByName("BotsService").Methods()
	botsServiceGetBotsHandler := connect.NewUnaryHandler(
		BotsServiceGetBotsProcedure,
		svc.GetBots,
		connect.WithSchema(botsServiceMethods.ByName("GetBots")),
		connect.WithHandlerOptions(opts...),
	)
	botsServiceGetBotStatHandler := connect.NewUnaryHandler(
		BotsServiceGetBotStatProcedure,
		svc.GetBotStat,
		connect.WithSchema(botsServiceMethods.ByName("GetBotStat")),
		connect.WithHandlerOptions(opts...),
	)
	botsServiceGetBotByTokenHashHandler := connect.NewUnaryHandler(
		BotsServiceGetBotByTokenHashProcedure,
		svc.GetBotByTokenHash,
		connect.WithSchema(botsServiceMethods.ByName("GetBotByTokenHash")),
		connect.WithHandlerOptions(opts...),
	)
	botsServiceCreateBotHandler := connect.NewUnaryHandler(
		BotsServiceCreateBotProcedure,
		svc.CreateBot,
		connect.WithSchema(botsServiceMethods.ByName("CreateBot")),
		connect.WithHandlerOptions(opts...),
	)
	botsServiceRemoveBotHandler := connect.NewUnaryHandler(
		BotsServiceRemoveBotProcedure,
		svc.RemoveBot,
		connect.WithSchema(botsServiceMethods.ByName("RemoveBot")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bots.v1.BotsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BotsServiceGetBotsProcedure:
			botsServiceGetBotsHandler.ServeHTTP(w, r)
		case BotsServiceGetBotStatProcedure:
			botsServiceGetBotStatHandler.ServeHTTP(w, r)
		case BotsServiceGetBotByTokenHashProcedure:
			botsServiceGetBotByTokenHashHandler.ServeHTTP(w, r)
		case BotsServiceCreateBotProcedure:
			botsServiceCreateBotHandler.ServeHTTP(w, r)
		case BotsServiceRemoveBotProcedure:
			botsServiceRemoveBotHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBotsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBotsServiceHandler struct{}

func (UnimplementedBotsServiceHandler) GetBots(context.Context, *connect.Request[v1.GetBotsRequest]) (*connect.Response[v1.GetBotsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bots.v1.BotsService.GetBots is not implemented"))
}

func (UnimplementedBotsServiceHandler) GetBotStat(context.Context, *connect.Request[v1.GetBotStatRequest]) (*connect.Response[v1.GetBotStatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bots.v1.BotsService.GetBotStat is not implemented"))
}

func (UnimplementedBotsServiceHandler) GetBotByTokenHash(context.Context, *connect.Request[v1.GetBotByTokenHashRequest]) (*connect.Response[v1.GetBotByTokenHashResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bots.v1.BotsService.GetBotByTokenHash is not implemented"))
}

func (UnimplementedBotsServiceHandler) CreateBot(context.Context, *connect.Request[v1.CreateBotRequest]) (*connect.Response[v1.CreateBotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bots.v1.BotsService.CreateBot is not implemented"))
}

func (UnimplementedBotsServiceHandler) RemoveBot(context.Context, *connect.Request[v1.RemoveBotRequest]) (*connect.Response[v1.RemoveBotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bots.v1.BotsService.RemoveBot is not implemented"))
}
