// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: internal_bots/v1/internal_bots.proto

package internal_botsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "ssuspy-proto/gen/internal_bots/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BotsServiceName is the fully-qualified name of the BotsService service.
	BotsServiceName = "internal_bots.v1.BotsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BotsServiceGetBotByIDProcedure is the fully-qualified name of the BotsService's GetBotByID RPC.
	BotsServiceGetBotByIDProcedure = "/internal_bots.v1.BotsService/GetBotByID"
	// BotsServiceGetBotsProcedure is the fully-qualified name of the BotsService's GetBots RPC.
	BotsServiceGetBotsProcedure = "/internal_bots.v1.BotsService/GetBots"
)

// BotsServiceClient is a client for the internal_bots.v1.BotsService service.
type BotsServiceClient interface {
	GetBotByID(context.Context, *connect.Request[v1.GetBotByIDRequest]) (*connect.Response[v1.GetBotByIDResponse], error)
	GetBots(context.Context, *connect.Request[v1.GetBotsRequest]) (*connect.Response[v1.GetBotsResponse], error)
}

// NewBotsServiceClient constructs a client for the internal_bots.v1.BotsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBotsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BotsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	botsServiceMethods := v1.File_internal_bots_v1_internal_bots_proto.Services().ByName("BotsService").Methods()
	return &botsServiceClient{
		getBotByID: connect.NewClient[v1.GetBotByIDRequest, v1.GetBotByIDResponse](
			httpClient,
			baseURL+BotsServiceGetBotByIDProcedure,
			connect.WithSchema(botsServiceMethods.ByName("GetBotByID")),
			connect.WithClientOptions(opts...),
		),
		getBots: connect.NewClient[v1.GetBotsRequest, v1.GetBotsResponse](
			httpClient,
			baseURL+BotsServiceGetBotsProcedure,
			connect.WithSchema(botsServiceMethods.ByName("GetBots")),
			connect.WithClientOptions(opts...),
		),
	}
}

// botsServiceClient implements BotsServiceClient.
type botsServiceClient struct {
	getBotByID *connect.Client[v1.GetBotByIDRequest, v1.GetBotByIDResponse]
	getBots    *connect.Client[v1.GetBotsRequest, v1.GetBotsResponse]
}

// GetBotByID calls internal_bots.v1.BotsService.GetBotByID.
func (c *botsServiceClient) GetBotByID(ctx context.Context, req *connect.Request[v1.GetBotByIDRequest]) (*connect.Response[v1.GetBotByIDResponse], error) {
	return c.getBotByID.CallUnary(ctx, req)
}

// GetBots calls internal_bots.v1.BotsService.GetBots.
func (c *botsServiceClient) GetBots(ctx context.Context, req *connect.Request[v1.GetBotsRequest]) (*connect.Response[v1.GetBotsResponse], error) {
	return c.getBots.CallUnary(ctx, req)
}

// BotsServiceHandler is an implementation of the internal_bots.v1.BotsService service.
type BotsServiceHandler interface {
	GetBotByID(context.Context, *connect.Request[v1.GetBotByIDRequest]) (*connect.Response[v1.GetBotByIDResponse], error)
	GetBots(context.Context, *connect.Request[v1.GetBotsRequest]) (*connect.Response[v1.GetBotsResponse], error)
}

// NewBotsServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBotsServiceHandler(svc BotsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	botsServiceMethods := v1.File_internal_bots_v1_internal_bots_proto.Services().ByName("BotsService").Methods()
	botsServiceGetBotByIDHandler := connect.NewUnaryHandler(
		BotsServiceGetBotByIDProcedure,
		svc.GetBotByID,
		connect.WithSchema(botsServiceMethods.ByName("GetBotByID")),
		connect.WithHandlerOptions(opts...),
	)
	botsServiceGetBotsHandler := connect.NewUnaryHandler(
		BotsServiceGetBotsProcedure,
		svc.GetBots,
		connect.WithSchema(botsServiceMethods.ByName("GetBots")),
		connect.WithHandlerOptions(opts...),
	)
	return "/internal_bots.v1.BotsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BotsServiceGetBotByIDProcedure:
			botsServiceGetBotByIDHandler.ServeHTTP(w, r)
		case BotsServiceGetBotsProcedure:
			botsServiceGetBotsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBotsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBotsServiceHandler struct{}

func (UnimplementedBotsServiceHandler) GetBotByID(context.Context, *connect.Request[v1.GetBotByIDRequest]) (*connect.Response[v1.GetBotByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internal_bots.v1.BotsService.GetBotByID is not implemented"))
}

func (UnimplementedBotsServiceHandler) GetBots(context.Context, *connect.Request[v1.GetBotsRequest]) (*connect.Response[v1.GetBotsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internal_bots.v1.BotsService.GetBots is not implemented"))
}
