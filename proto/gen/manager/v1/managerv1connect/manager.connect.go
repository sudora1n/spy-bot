// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: manager/v1/manager.proto

package managerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "ssuspy-proto/gen/manager/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ManagerServiceName is the fully-qualified name of the ManagerService service.
	ManagerServiceName = "manager.v1.ManagerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ManagerServiceCreateBotProcedure is the fully-qualified name of the ManagerService's CreateBot
	// RPC.
	ManagerServiceCreateBotProcedure = "/manager.v1.ManagerService/CreateBot"
	// ManagerServiceRemoveBotProcedure is the fully-qualified name of the ManagerService's RemoveBot
	// RPC.
	ManagerServiceRemoveBotProcedure = "/manager.v1.ManagerService/RemoveBot"
)

// ManagerServiceClient is a client for the manager.v1.ManagerService service.
type ManagerServiceClient interface {
	CreateBot(context.Context, *connect.Request[v1.CreateBotRequest]) (*connect.Response[v1.CreateBotResponse], error)
	RemoveBot(context.Context, *connect.Request[v1.RemoveBotRequest]) (*connect.Response[v1.RemoveBotResponse], error)
}

// NewManagerServiceClient constructs a client for the manager.v1.ManagerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewManagerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ManagerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	managerServiceMethods := v1.File_manager_v1_manager_proto.Services().ByName("ManagerService").Methods()
	return &managerServiceClient{
		createBot: connect.NewClient[v1.CreateBotRequest, v1.CreateBotResponse](
			httpClient,
			baseURL+ManagerServiceCreateBotProcedure,
			connect.WithSchema(managerServiceMethods.ByName("CreateBot")),
			connect.WithClientOptions(opts...),
		),
		removeBot: connect.NewClient[v1.RemoveBotRequest, v1.RemoveBotResponse](
			httpClient,
			baseURL+ManagerServiceRemoveBotProcedure,
			connect.WithSchema(managerServiceMethods.ByName("RemoveBot")),
			connect.WithClientOptions(opts...),
		),
	}
}

// managerServiceClient implements ManagerServiceClient.
type managerServiceClient struct {
	createBot *connect.Client[v1.CreateBotRequest, v1.CreateBotResponse]
	removeBot *connect.Client[v1.RemoveBotRequest, v1.RemoveBotResponse]
}

// CreateBot calls manager.v1.ManagerService.CreateBot.
func (c *managerServiceClient) CreateBot(ctx context.Context, req *connect.Request[v1.CreateBotRequest]) (*connect.Response[v1.CreateBotResponse], error) {
	return c.createBot.CallUnary(ctx, req)
}

// RemoveBot calls manager.v1.ManagerService.RemoveBot.
func (c *managerServiceClient) RemoveBot(ctx context.Context, req *connect.Request[v1.RemoveBotRequest]) (*connect.Response[v1.RemoveBotResponse], error) {
	return c.removeBot.CallUnary(ctx, req)
}

// ManagerServiceHandler is an implementation of the manager.v1.ManagerService service.
type ManagerServiceHandler interface {
	CreateBot(context.Context, *connect.Request[v1.CreateBotRequest]) (*connect.Response[v1.CreateBotResponse], error)
	RemoveBot(context.Context, *connect.Request[v1.RemoveBotRequest]) (*connect.Response[v1.RemoveBotResponse], error)
}

// NewManagerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewManagerServiceHandler(svc ManagerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	managerServiceMethods := v1.File_manager_v1_manager_proto.Services().ByName("ManagerService").Methods()
	managerServiceCreateBotHandler := connect.NewUnaryHandler(
		ManagerServiceCreateBotProcedure,
		svc.CreateBot,
		connect.WithSchema(managerServiceMethods.ByName("CreateBot")),
		connect.WithHandlerOptions(opts...),
	)
	managerServiceRemoveBotHandler := connect.NewUnaryHandler(
		ManagerServiceRemoveBotProcedure,
		svc.RemoveBot,
		connect.WithSchema(managerServiceMethods.ByName("RemoveBot")),
		connect.WithHandlerOptions(opts...),
	)
	return "/manager.v1.ManagerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ManagerServiceCreateBotProcedure:
			managerServiceCreateBotHandler.ServeHTTP(w, r)
		case ManagerServiceRemoveBotProcedure:
			managerServiceRemoveBotHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedManagerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedManagerServiceHandler struct{}

func (UnimplementedManagerServiceHandler) CreateBot(context.Context, *connect.Request[v1.CreateBotRequest]) (*connect.Response[v1.CreateBotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.ManagerService.CreateBot is not implemented"))
}

func (UnimplementedManagerServiceHandler) RemoveBot(context.Context, *connect.Request[v1.RemoveBotRequest]) (*connect.Response[v1.RemoveBotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.ManagerService.RemoveBot is not implemented"))
}
