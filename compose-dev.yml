services:
  mongodb:
    image: mongo:latest
    container_name: ssuspy-mongodb
    restart: always
    profiles: ["dev", "prod"]
    ports:
      - 27017:27017
    environment:
      - MONGO_USERNAME
      - MONGO_PASSWORD
      - MONGO_INITDB_ROOT_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD
    networks:
      - ssuspy
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/init.js
      - ./migrations:/migrations
      - mongo-data:/data/db
    healthcheck:
      test: mongosh --quiet --eval "db.getSiblingDB('ssuspy')"
      interval: 10s
      timeout: 1s
      retries: 10

  redis:
    image: redis:7
    container_name: ssuspy-redis
    profiles: ["dev", "prod"]
    volumes:
      - redis-data:/data
    networks:
      - ssuspy
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 1s
      retries: 10

  telegram-bot-api:
    image: aiogram/telegram-bot-api:latest
    container_name: ssuspy-telegram-bot-api
    profiles: ["dev", "prod"]
    environment:
      - TELEGRAM_API_ID
      - TELEGRAM_API_HASH
      - TELEGRAM_LOCAL=true
      - TELEGRAM_STAT=true
    volumes:
      - telegram-bot-api-data:/var/lib/telegram-bot-api
    expose:
      - 8081:8081
    networks:
      - ssuspy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--output-document=/dev/null",
          "http://127.0.0.1:8082",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  business-bot:
    image: ghcr.io/sudora1n/spy-bot-business:latest
    restart: unless-stopped
    container_name: ssuspy-business-bot
    profiles: ["dev", "prod"]
    build:
      context: ./business_bot
      additional_contexts:
        root: .
    environment:
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_USERNAME
      - MONGO_PASSWORD
      - MONGO_DB
      - DEV_MODE
      - REDIS_HOST=redis
      - REDIS_USERNAME
      - REDIS_PASSWORD
      - REDIS_PORT
      - REDIS_DB
      - TELEGRAM_API_URL=http://telegram-bot-api:8081
      - BUSINESS_GITHUB_URL
    volumes:
      - telegram-bot-api-data:/var/lib/telegram-bot-api/
    networks:
      - ssuspy
    expose:
      - 8080:8080
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      telegram-bot-api:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--output-document=/dev/null",
          "http://127.0.0.1:8080/metrics",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  creator-bot:
    image: ghcr.io/sudora1n/spy-bot-creator:latest
    restart: unless-stopped
    container_name: ssuspy-creator-bot
    profiles: ["dev", "prod"]
    build:
      context: ./creator_bot
      additional_contexts:
        root: .
    environment:
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_USERNAME
      - MONGO_PASSWORD
      - MONGO_DB
      - DEV_MODE
      - REDIS_HOST=redis
      - REDIS_USERNAME
      - REDIS_PASSWORD
      - REDIS_PORT
      - REDIS_DB
      - TELEGRAM_TOKEN
      - TELEGRAM_API_URL=http://telegram-bot-api:8081
      - CREATOR_GITHUB_URL
      - GRPC_SERVER_HOST=business-bot
    expose:
      - 8080:8080
    networks:
      - ssuspy
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      telegram-bot-api:
        condition: service_healthy
      business-bot:
        condition: service_healthy

  # infra
  prometheus:
    image: prom/prometheus:latest
    container_name: ssuspy-prometheus
    profiles: ["prod"]
    networks:
      - ssuspy
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    expose:
      - "9090:9090"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: ssuspy-node-exporter
    profiles: ["prod"]
    networks:
      - ssuspy
    ports:
      - "9100:9100"

  grafana:
    image: grafana/grafana:latest
    container_name: ssuspy-grafana
    profiles: ["prod"]
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - ssuspy
    depends_on:
      prometheus:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

volumes:
  telegram-bot-api-data:
  redis-data:
  mongo-data:
  prometheus-data:
  grafana-data:

networks:
  ssuspy:
